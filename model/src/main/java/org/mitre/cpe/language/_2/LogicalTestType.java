//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.15 at 11:01:26 PM EDT 
//


package org.mitre.cpe.language._2;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * The logical-test element appears as a child of a
 *                         platform element, and may also be nested to create more complex logical
 *                         tests. The content consists of one or more elements: fact-ref, and
 *                         logical-test children are permitted. The operator to be applied, and
 *                         optional negation of the test, are given as attributes.
 * 
 * <p>Java class for LogicalTestType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LogicalTestType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="logical-test" type="{http://cpe.mitre.org/language/2.0}LogicalTestType" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://cpe.mitre.org/language/2.0}fact-ref" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="operator" use="required" type="{http://cpe.mitre.org/language/2.0}operatorEnumeration" />
 *       &lt;attribute name="negate" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LogicalTestType", propOrder = {
    "logicalTest",
    "factRef"
})
public class LogicalTestType {

    @XmlElement(name = "logical-test")
    protected List<LogicalTestType> logicalTest;
    @XmlElement(name = "fact-ref")
    protected List<FactRefType> factRef;
    @XmlAttribute(name = "operator", required = true)
    protected OperatorEnumeration operator;
    @XmlAttribute(name = "negate", required = true)
    protected boolean negate;

    /**
     * Gets the value of the logicalTest property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the logicalTest property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLogicalTest().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LogicalTestType }
     * 
     * 
     */
    public List<LogicalTestType> getLogicalTest() {
        if (logicalTest == null) {
            logicalTest = new ArrayList<LogicalTestType>();
        }
        return this.logicalTest;
    }

    /**
     * Gets the value of the factRef property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the factRef property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFactRef().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FactRefType }
     * 
     * 
     */
    public List<FactRefType> getFactRef() {
        if (factRef == null) {
            factRef = new ArrayList<FactRefType>();
        }
        return this.factRef;
    }

    /**
     * Gets the value of the operator property.
     * 
     * @return
     *     possible object is
     *     {@link OperatorEnumeration }
     *     
     */
    public OperatorEnumeration getOperator() {
        return operator;
    }

    /**
     * Sets the value of the operator property.
     * 
     * @param value
     *     allowed object is
     *     {@link OperatorEnumeration }
     *     
     */
    public void setOperator(OperatorEnumeration value) {
        this.operator = value;
    }

    /**
     * Gets the value of the negate property.
     * 
     */
    public boolean isNegate() {
        return negate;
    }

    /**
     * Sets the value of the negate property.
     * 
     */
    public void setNegate(boolean value) {
        this.negate = value;
    }

}
